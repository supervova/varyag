// Use span.text-truncate for buttons with long labels

%btn {
  --display: inline-flex;

  appearance: none;
  border: 0;
  cursor: pointer;
  display: var(--display);
  align-items: center;
  justify-content: center;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  user-select: none;
  vertical-align: middle;

  &:focus {
    outline: 0;
  }
}

.btn,
%btn-base {
  @extend %btn;

  border-radius: $shape-border-radius-sm;
  text-decoration: none;
  max-width: 100%;
  height: $size-5;

  &:hover {
    text-decoration: none;
  }

  &:active {
    box-shadow:
      inset 0 0 0 1px $color-ink-border,
      inset 0 3px 5px $color-ink-border,
      inset 0 0 0 100px $color-neutral-dark-min;
  }

  &:focus,
  &:active:focus {
    box-shadow: $layer-box-shadow-focus-outline;
  }
}

.btn {
  @extend %label;

  --padding: 0 #{$size-2};

  background-color: $color-background-alt;
  padding: var(--padding);
  transition:
    box-shadow $motion-duration-xs,
    transform $motion-duration-xs;

  &:hover {
    box-shadow:
      $layer-box-shadow-contour,
      $layer-box-shadow-z2;
    transform: translateY(-.1rem);
  }

  &.is-compact {
    --padding: 0 1.2rem;
  }

  @include media-breakpoint-up(md) {
    --padding: 0 #{$size-3};
  }
}

.btn.is-primary {
  background-color: $color-background-primary-dark;
  color: $color-ink-inverse-base;
  text-shadow: 0 1px 0 $color-ink-border;
  transition: filter $motion-duration-xs;

  &:hover {
    color: $color-ink-inverse-base;
    filter: brightness($color-brightness-hover);
  }

  &:focus {
    box-shadow: $layer-box-shadow-focus-outline;
  }
}

.btn.is-outline {
  background-color: transparent;
  box-shadow: inset 0 0 0 1px $color-brand-primary-base;
  color: $color-ink-primary-text;
  transition:
    background-color $motion-duration-sm,
    box-shadow $motion-duration-sm;

  &:hover {
    color: $color-ink-primary-text;
    box-shadow:
      inset 0 0 0 1px $color-brand-primary-base,
      $layer-box-shadow-z2;
  }

  &:focus {
    box-shadow: $layer-box-shadow-focus-outline;
  }
}

// GHOST (not underlined links like)
.btn.is-ghost,
%btn-ghost {
  @extend %btn;

  background-color: transparent;
  color: $color-ink-link;

  &:hover {
    text-decoration: none;
  }

  &:focus {
    box-shadow: $layer-box-shadow-focus-outline;
  }
}

// ICON
.btn.is-icon {
  background-color: $color-background-alt;
  border: 2px solid $color-brand-primary-base;
  border-radius: 50%;
  padding: 0;
  width: $size-5;
  height: $size-5;

  &:hover {
    filter: brightness($color-brightness-hover);
  }

  &:focus {
    box-shadow: $layer-box-shadow-focus-outline;
  }
}

// SIZES
.btn.is-lg {
  height: $size-7;
}

// STAND ALONE

.is-stand-alone {
  @include media-breakpoint-up(sm) {
    flex-basis: 0;
    margin: 0 auto;
  }
}

// BUTTON GROUP

.buttons,
%buttons {
  display: flex;

  .btn + .btn {
    margin-left: $size-1;
  }
}

// -----------------------------------------------------------------------------
// CLOSE
// -----------------------------------------------------------------------------

.btn.is-close {
  border-radius: 50%;
  flex-shrink: 0;
  padding: .4rem;
  height: auto;
}

// -----------------------------------------------------------------------------
// ACCESSIBLE TOGGLE BUTTON
// -----------------------------------------------------------------------------

// https://material.io/components/buttons#toggle-button

// MARKUP AND SCRIPTING

// This button is NOT active
// button.btn.is-fave(aria-label='Favorite', aria-pressed='false') ❤

// This button IS
// button.fave(aria-label='Favorite', aria-pressed='true') ❤

// Change the attribute value using the setAttribute() method.
// btn.setAttribute('aria-pressed', true);
// btn.setAttribute('aria-pressed', false);

.btn.is-toggle[aria-pressed='true'] {
  color: $color-ink-primary-text;
}
