// -----------------------------------------------------------------------------
// CONTAINER
// -----------------------------------------------------------------------------

.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: var(--size-padding-x-container);
  padding-right: var(--size-padding-x-container);
  width: 100%;

  // we iterate over the map $container-max-widths: save the key to the variable
  // $breakpoint, and save the value to the variable $max-width
  @each $breakpoint, $max-width in $container-max-widths {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      width: calc(#{$max-width} + var(--size-padding-x-container) * 2);
      max-width: 100%;
    }
  }
}

// -----------------------------------------------------------------------------
// BS 5.1 CSS Grid
// -----------------------------------------------------------------------------
// #region

@mixin grid() {
  display: grid;
  gap: var(--gap, #{$size-2});
  grid-template-columns: repeat(var(--columns, 12), 1fr);
  grid-template-rows: repeat(var(--rows, 1), 1fr);
}

// Full width grid
@mixin grid-fw() {
  display: grid;
  gap: var(--gap, #{$size-2});
  grid-template-columns:
    [outer-start] minmax(var(--size-padding-x-container), calc((100% - var(--max-width, 28rem)) / 2))
    [main-start] repeat(var(--columns, 12), [col-start] 1fr)
    [main-end] minmax(var(--size-padding-x-container), calc((100% - var(--max-width, 28rem)) / 2)) [outer-end];
  grid-template-rows: repeat(var(--rows, 1), 1fr);
}

.grid,
%grid {
  @include grid();
}

.grid.is-md {
  @include media-breakpoint-down(md) {
    display: flex;
    flex-direction: column;
  }
}

.grid.is-lg {
  @include media-breakpoint-down(lg) {
    display: flex;
    flex-direction: column;
  }
}

.grid.is-xl {
  @include media-breakpoint-down(xl) {
    display: flex;
    flex-direction: column;
  }
}

// Create all columns classes:
// .grid .g-col-sm-10{grid-column:auto/span 10}
// .g-col-md-8{grid-column:auto/span 8} etc
.grid,
%grid-colulms {
  @include make-cssgrid();
}
// #endregion

// -----------------------------------------------------------------------------
// FLEX GROUPS
// -----------------------------------------------------------------------------
// #region

// ⚠️ Don't use gap with explicit width columns. The gaps will be flattened
// to the overall width of the row and they break the entire layout. But auto
// width columns with equal flex-basis are ok.

.f-group {
  --gap: $size-2;
}

@mixin flex-group() {
  display: flex;
  gap: var(--gap);
}

$qwt-flex-groups: 'base', 'sm', 'md', 'lg';

@each $breakpoint in $qwt-flex-groups {
  @if $breakpoint == base {
    .f-group.is-base:not(.is-row),
    %f-group {
      @include flex-group();
    }
  } @else {
    .f-group.is-#{$breakpoint},
    %f-group-#{$breakpoint} {
      @include media-breakpoint-up($breakpoint) {
        @include flex-group();
      }
    }
  }
}

// Auto width
.f-group:not(.is-row) > * {
  flex: 0 0 auto;
}

// Equal width
.f-group.is-row > * {
  flex: 1 1 100%;
}

.f-group.is-v-centered {
  align-items: center;
}
// #endregion

// -----------------------------------------------------------------------------
// HORIZONTAL SCROLLING ROWS
// -----------------------------------------------------------------------------
// #region

.row.is-sm-y-scrolling {
  --is-sm-y-scrolling-item-width: #{$size-width-sm};

  @include media-breakpoint-down(md) {
    -webkit-overflow-scrolling: touch;
    flex-wrap: nowrap;
    overflow-x: auto;
    margin-right: calc(-1 * var(--size-padding-x-container));
    min-width: 100%;

    &::-webkit-scrollbar {
      display: none;
    }

    [class^='col-'],
    [class*=' col-'] {
      margin-right: $size-gutter-base;
      width: var(--is-sm-y-scrolling-item-width);
    }
  }
}
// #endregion



// -----------------------------------------------------------------------------
// MASONRY
// -----------------------------------------------------------------------------
// #region

.grid.is-masonry {
  grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));
  grid-template-rows: masonry;
}

// #endregion: grid

// -----------------------------------------------------------------------------
// TIPS
// -----------------------------------------------------------------------------
// #region

// 🔵 Use snippets +col & +colstart

// 🔵 Произвольные координаты и размеры блоков.
// Координатами колонок и строк, можно изменять положение
// блока в макете — то, что во flex делает свойство order
// .main {
//   grid-column: 4/13;
//   grid-row: 2/4;
// }

// 🔵 Ширина и положение элементов блоков определяется свойствами
// grid-column-start и grid-column-end. Либо порядком разметки и свойством
// grid-column: span *;

// 🔵 Изображениям, вписанным в сетку, назначается object-fit: cover.

// 🔵 Для для отрицательных отступов блоков полной ширины применяется
// margin-{right|left}: calc(50% - 50vw).

// #endregion: tips

// -----------------------------------------------------------------------------
// CSS COLUMNS
// -----------------------------------------------------------------------------
// #region

.columns.is-md-2 {
  @include media-breakpoint-up(md) {
    columns: 2;
    column-gap: $size-gutter-base;
  }
}

.columns.is-lg-3 {
  @include media-breakpoint-up(lg) {
    columns: 3;
  }
}

.columns.is-masonry > * {
  break-inside: avoid-column;
}
// #endregion
